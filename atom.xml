<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NullOK - Blog</title>
  
  <subtitle>NullPointException</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nullok.com/"/>
  <updated>2020-01-23T14:39:15.473Z</updated>
  <id>http://www.nullok.com/</id>
  
  <author>
    <name>nullok</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro + Redis自定义session会话管理</title>
    <link href="http://www.nullok.com/2020/01/23/Shiro-Redis%E8%87%AA%E5%AE%9A%E4%B9%89session%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"/>
    <id>http://www.nullok.com/2020/01/23/Shiro-Redis%E8%87%AA%E5%AE%9A%E4%B9%89session%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</id>
    <published>2020-01-23T11:54:09.000Z</published>
    <updated>2020-01-23T14:39:15.473Z</updated>
    
    <content type="html"><![CDATA[<p><code>此图非常重要！！！镇楼</code></p><p><img src="https://s2.ax1x.com/2020/01/23/1V1qmj.png" alt="shiro"></p><h2 id="0x001-重写SessionManager"><a href="#0x001-重写SessionManager" class="headerlink" title="0x001 重写SessionManager"></a>0x001 重写SessionManager</h2><p>shiro提供了三种默认实现：</p><ul><li><strong>DefaultSessionManager</strong>： 用于java se 环境</li><li><strong>ServletContainerSessionManager</strong>：默认使用的实现，Servlet容器管理</li><li><strong>DefaultWebSessionManager</strong>：自己维护</li></ul><p>重写<code>SessionManager</code>需要继承<code>DefaultWebSessionManager</code>类</p><p>目的：自定义从<code>header</code>中的<code>Authorization</code>获取<code>token</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSessionManager</span> <span class="keyword">extends</span> <span class="title">DefaultWebSessionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">getSessionId</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        String id = WebUtils.toHttp(request).getHeader(<span class="string">"Authorization"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(id)) &#123;</span><br><span class="line">            <span class="comment">// 获取sessionId，id可以自定义</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getSessionId(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//返回sessionId；固定套路</span></span><br><span class="line">            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE, <span class="string">"header"</span>);</span><br><span class="line">            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID, id);</span><br><span class="line">            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID, Boolean.TRUE);</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x002-重写SessionDao"><a href="#0x002-重写SessionDao" class="headerlink" title="0x002 重写SessionDao"></a>0x002 重写SessionDao</h2><p>重写<code>SessionDao</code> 需要实现<code>SessionDAO</code>接口</p><p>继承以下子类也可以：</p><p><img src="https://s2.ax1x.com/2020/01/23/1V8Isg.png" alt="SessionDAO实现关系"></p><p>继承<code>AbstractSessionDAO</code>，其实现了基础的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfSessionDao</span> <span class="keyword">extends</span> <span class="title">AbstractSessionDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String prefix = <span class="string">"shiro:session"</span>;</span><br><span class="line">    <span class="comment">// 创建session，保存到数据库</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">doCreate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        Serializable sessionId = generateSessionId(session);</span><br><span class="line"></span><br><span class="line">        String s = JSON.toJSONString(session);</span><br><span class="line">        System.out.println(<span class="string">"doCreate:"</span> + s);</span><br><span class="line">        <span class="comment">// 必须要将生成的id设置到session实力当中</span></span><br><span class="line">        assignSessionId(session,sessionId);</span><br><span class="line">        redisTemplate.boundValueOps(prefix + sessionId).set(session);</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Session <span class="title">doReadSession</span><span class="params">(Serializable sessionId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Session) redisTemplate.boundValueOps(prefix + sessionId).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Session session)</span> <span class="keyword">throws</span> UnknownSessionException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || session.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownSessionException(<span class="string">"session 或者 session为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        redisTemplate.boundValueOps(prefix + session.getId()).set(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        redisTemplate.delete(prefix + session.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Session&gt; <span class="title">getActiveSessions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;Object&gt; keys = redisTemplate.keys(prefix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (keys != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> keys.stream().map(key -&gt; &#123;</span><br><span class="line">                Session s = (Session) redisTemplate.boundValueOps(key).get();</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x003自定义id生成器"><a href="#0x003自定义id生成器" class="headerlink" title="0x003自定义id生成器"></a>0x003自定义id生成器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSessionIdGenerator</span> <span class="keyword">implements</span> <span class="title">SessionIdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">generateId</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//... 生成id逻辑</span></span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x004-配置类"><a href="#0x004-配置类" class="headerlink" title="0x004 配置类"></a>0x004 配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">getSecurityManager</span><span class="params">(CustomRealm realm,DefaultWebSessionManager defaultWebSessionManager)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将自定义的会话管理器注册到安全管理器中</span></span><br><span class="line">        securityManager.setSessionManager(defaultWebSessionManager);</span><br><span class="line">        <span class="comment">//将自定义的redis缓存管理器注册到安全管理器中</span></span><br><span class="line">        securityManager.setCacheManager(selfCacheManager());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//会话管理器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">sessionManager</span><span class="params">(SelfSessionDao selfSessionDao)</span> </span>&#123;</span><br><span class="line">        CustomSessionManager sessionManager = <span class="keyword">new</span> CustomSessionManager();</span><br><span class="line">        <span class="comment">// 自定义sessionDAO</span></span><br><span class="line">        sessionManager.setSessionDAO(selfSessionDao);</span><br><span class="line">        <span class="comment">// 自定义id生成器</span></span><br><span class="line">selfSessionDao.setSessionIdGenerator(<span class="keyword">new</span> CustomSessionIdGenerator());</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;此图非常重要！！！镇楼&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/01/23/1V1qmj.png&quot; alt=&quot;shiro&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x001-重写SessionManager&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Shiro" scheme="http://www.nullok.com/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="http://www.nullok.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu中docker开启远程模式</title>
    <link href="http://www.nullok.com/2020/01/22/Ubuntu%E4%B8%ADdocker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.nullok.com/2020/01/22/Ubuntu%E4%B8%ADdocker%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-01-22T09:54:49.000Z</published>
    <updated>2020-01-23T14:39:28.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>找到<code>ExecStart</code>,并添加<strong>-H tcp://0.0.0.0:2375</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原：</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">增加-H tcp://0.0.0.0:2375：</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload // 加载docker守护线程</span><br><span class="line">systemctl restart docker // 重启docker</span><br></pre></td></tr></table></figure><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>测试是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H 127.0.0.1 info</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">显示信息</span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 5</span><br><span class="line">  Running: 1</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 4</span><br><span class="line"> Images: 6</span><br><span class="line"> Server Version: 19.03.3</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="docker" scheme="http://www.nullok.com/categories/docker/"/>
    
    
      <category term="Ubuntu" scheme="http://www.nullok.com/tags/Ubuntu/"/>
    
      <category term="docker" scheme="http://www.nullok.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>springboot+mybatis配置中遇到的问题</title>
    <link href="http://www.nullok.com/2019/10/05/springboot-mybatis%E9%85%8D%E7%BD%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.nullok.com/2019/10/05/springboot-mybatis%E9%85%8D%E7%BD%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-10-05T13:43:01.000Z</published>
    <updated>2020-01-23T14:39:19.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.ileehan.community.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;c3p0.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jdbcDriver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;c3p0.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jdbcUrl;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;c3p0.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jdbcUsername;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;c3p0.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jdbcPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComboPooledDataSource <span class="title">createDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(jdbcDriver);</span><br><span class="line">        dataSource.setJdbcUrl(jdbcUrl);</span><br><span class="line">        dataSource.setUser(jdbcUsername);</span><br><span class="line">        dataSource.setPassword(jdbcPassword);</span><br><span class="line">        <span class="comment">// 关闭连接之后不自动commit</span></span><br><span class="line">        dataSource.setAutoCommitOnClose(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置SqlSessionFactoryBean"><a href="#配置SqlSessionFactoryBean" class="headerlink" title="配置SqlSessionFactoryBean"></a>配置SqlSessionFactoryBean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionFactoryConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mapper.xml.config.path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mapperXMLConfigPath;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mapper.package.path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mapperPackagePath;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mapper.global.config&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String globalConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">createSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        <span class="comment">// resource查找器可以查找类路径下或文件路径下的资源</span></span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="comment">// mapperXML文件路径</span></span><br><span class="line">        String packageMapperXMLConfigPath = PathMatchingResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + mapperXMLConfigPath;</span><br><span class="line">        <span class="comment">// mybatis-config.xml路径</span></span><br><span class="line">        String globalConfigPath = PathMatchingResourcePatternResolver.CLASSPATH_URL_PREFIX + globalConfig;</span><br><span class="line">        <span class="comment">// 设置 mapper 对应的 XML 文件的路径</span></span><br><span class="line">  sqlSessionFactoryBean.setMapperLocations(resolver.getResources(packageMapperXMLConfigPath));</span><br><span class="line">        <span class="comment">// 设置数据源</span></span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 设置 mapper 接口所在的包</span></span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(mapperPackagePath);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置mybatis-config.xml，否则xml中全局配置将失效</span></span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resolver.getResource(globalConfigPath));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在使用配置类配置SqlSessionFactoryBean时，要记得设置setConfigLocation</p></blockquote><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置数据源&quot;&gt;&lt;a href=&quot;#配置数据源&quot; class=&quot;headerlink&quot; title=&quot;配置数据源&quot;&gt;&lt;/a&gt;配置数据源&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://www.nullok.com/categories/SpringBoot/"/>
    
    
      <category term="笔记" scheme="http://www.nullok.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SpringBoot" scheme="http://www.nullok.com/tags/SpringBoot/"/>
    
      <category term="Mybatis" scheme="http://www.nullok.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Struts2.5.x遇到的坑</title>
    <link href="http://www.nullok.com/2019/07/29/Struts2-5-x%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://www.nullok.com/2019/07/29/Struts2-5-x%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2019-07-29T11:55:28.000Z</published>
    <updated>2020-01-23T13:51:36.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通配符访问方法，报错404错误找不到页面"><a href="#通配符访问方法，报错404错误找不到页面" class="headerlink" title="通配符访问方法，报错404错误找不到页面"></a>通配符访问方法，报错404错误找不到页面</h3><p><strong>报错截图</strong></p><p><img src="https://s2.ax1x.com/2019/07/29/e8GF00.jpg" alt="报错截图"></p><p><strong>报错内容：</strong>There is no Action mapped for namespace [/] and action name [Emp_edit] associated with context path [/demo].</p><p><strong>错误原因：</strong>Struts2.5 为了提升安全性，默认开启了Strict Method Invocation（<code>strict-method-invocation</code>）</p><p>在SMI开启的情况下，通配符不会匹配所有的方法名，而是会匹配在<code>default-struts.xml</code>文件中<code>global-allowed-methods</code>属性所允许的方法名或者是匹配通过 <code>&lt;allowed-method/&gt;</code>标签来定义的方法名。</p><p><strong>解决方法：</strong></p><p>​        <strong>方法一</strong></p><p>在struts.xml中的package下添加<global-allowed-methods>regex:.*</global-allowed-methods>，匹配所有。</p><p><img src="https://s2.ax1x.com/2019/07/29/e8GCXn.jpg" alt="添加global"></p><p>​        <strong>方法二</strong></p><p>将package标签的属性<code>strict-method-invocation</code>设置为<code>false</code>。</p><p><img src="https://s2.ax1x.com/2019/07/29/e8Gimq.jpg" alt="关闭SMI"></p><p><strong>默认全局允许匹配的方法名称：</strong></p><p><img src="https://s2.ax1x.com/2019/07/29/e8G96s.jpg" alt="默认允许的方法名"></p><h2 id="动态匹配问题"><a href="#动态匹配问题" class="headerlink" title="动态匹配问题"></a>动态匹配问题</h2><p><a href="https://cwiki.apache.org/confluence/display/WW/Action+Configuration#ActionConfiguration-StrictMethodInvocation" target="_blank" rel="noopener">官方解释</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;通配符访问方法，报错404错误找不到页面&quot;&gt;&lt;a href=&quot;#通配符访问方法，报错404错误找不到页面&quot; class=&quot;headerlink&quot; title=&quot;通配符访问方法，报错404错误找不到页面&quot;&gt;&lt;/a&gt;通配符访问方法，报错404错误找不到页面&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="Struts2" scheme="http://www.nullok.com/categories/Struts2/"/>
    
    
      <category term="-Struts2 -Java" scheme="http://www.nullok.com/tags/Struts2-Java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA导入mysql驱动，运行时找不到驱动包解决方案</title>
    <link href="http://www.nullok.com/2019/07/23/IDEA%E5%AF%BC%E5%85%A5mysql%E9%A9%B1%E5%8A%A8%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E6%89%BE%E4%B8%8D%E5%88%B0%E9%A9%B1%E5%8A%A8%E5%8C%85%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.nullok.com/2019/07/23/IDEA%E5%AF%BC%E5%85%A5mysql%E9%A9%B1%E5%8A%A8%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E6%89%BE%E4%B8%8D%E5%88%B0%E9%A9%B1%E5%8A%A8%E5%8C%85%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2019-07-23T10:09:13.000Z</published>
    <updated>2020-01-23T13:50:53.747Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>状况：</strong></p><p>驱动导入了。</p><p><img src="https://s2.ax1x.com/2019/07/23/ekOaz6.jpg" alt="&quot;驱动包导入&quot;"></p><p>编译成功，运行报错：</p><p><img src="https://s2.ax1x.com/2019/07/23/ekOBLD.jpg" alt="报错"></p><p><strong>解决办法</strong></p><ol><li>在WEB-INF目录下创建lib文件夹，将驱动包放入文件夹，并将lib文件设置为resources </li></ol><p><img src="https://s2.ax1x.com/2019/07/23/ekO0sO.jpg" alt="设置resources"></p><ol start="2"><li>再次添加驱动包就可以了</li></ol><p><img src="https://s2.ax1x.com/2019/07/23/ekOwQK.jpg" alt="再次添加"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;strong&gt;状况：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;驱动导入了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/07/23/ekOaz6.jpg&quot; alt=&quot;&amp;quot;驱动包导入&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;编译成功，运行报错
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://www.nullok.com/categories/Servlet/"/>
    
    
      <category term="-Servlet" scheme="http://www.nullok.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>MyEclipse2017破解方法</title>
    <link href="http://www.nullok.com/2019/07/20/MyEclipse2017%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>http://www.nullok.com/2019/07/20/MyEclipse2017%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</id>
    <published>2019-07-20T13:58:59.000Z</published>
    <updated>2020-01-23T13:51:17.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>安装包链接: <a href="https://pan.baidu.com/s/139Yc0FYVeKckEfgPMROhkQ" target="_blank" rel="noopener">https://pan.baidu.com/s/139Yc0FYVeKckEfgPMROhkQ</a> 提取码: ilee</p><p>破解文件链接: <a href="https://pan.baidu.com/s/1eEn8nKAa07nnNnv_U-hnJw" target="_blank" rel="noopener">https://pan.baidu.com/s/1eEn8nKAa07nnNnv_U-hnJw</a> 提取码: ilee</p><ol><li>首先配置好Java环境。</li><li>安装MyEclipse。</li><li>在安装最后一步，千万别点那个打开MyEclipse。</li><li>关闭安装界面后，把<a href="https://www.52pojie.cn/" target="_blank" rel="noopener">破解</a>文件中的path里的所有文件拷贝进你的安装目录里的plugins，这里提醒你替换，选择替换。</li><li>替换完成后，再打开破解文件里myeclipse_keygen文件夹里的crack.bat，如果你发现点开闪退，这是你Java环境没有配置好的原因，去配置好你的Java环境，再运行crack.bat，出来一个界面。上面的空是你的用户名，这里自己起个名就ok，后面那个里面有很多版本，自己选择一个版本。</li><li>输好用户名，选择好版本，点一下systemid，再点一下systemid，然后点一下active，然后窗口下方会出现一堆东西<br>例如这些：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LICENSEE</span><br><span class="line">        Jerry</span><br><span class="line">LICENSE_KEY</span><br><span class="line">        WLR8ZO-<span class="number">855555</span>-<span class="number">7653625140119936</span></span><br><span class="line">ACTIVATION_CODE</span><br><span class="line">        <span class="number">11</span>dFE23feaa1DBFE147730WLR8ZO-<span class="number">855555</span>-<span class="number">7653625140119936210817</span></span><br><span class="line">ACTIVATION_KEY</span><br><span class="line">    b5f7219363534b3fe8c02272c4cae4bff6621a5ceab73c4212c7e9e79fcf9ea5a5eedc9552a9901ef542ea90b474a6de64fe91b24b1e899982ff0a0152bb9ebae97efa69edd53ca90ccd85135f17a16571c297be4489108071870bf92d255f8dd95e01806d03727767b09e468dae9ac6c7a324126c026e483d0f20d2a231073d</span><br></pre></td></tr></table></figure><p>看到这些，保留这个窗口，打开MyEclipse，打开后，选择active now，输入你的用户名和那个license key，然后，继续激活，选择我已经有激活文件（这里应该是英文，大家自己理解意思哈），输入activation_key下面那一大串的东西，然后激活就OK。</p><p><img src="https://attach.52pojie.cn/forum/201808/18/210620vxk4dkg8464adj8q.png" alt></p><p><a href="https://www.52pojie.cn/thread-784654-1-1.html" target="_blank" rel="noopener">方法来源52破解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;安装包链接: &lt;a href=&quot;https://pan.baidu.com/s/139Yc0FYVeKckEfgPMROhkQ&quot; targe
      
    
    </summary>
    
    
      <category term="工具" scheme="http://www.nullok.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="http://www.nullok.com/tags/Java/"/>
    
      <category term="工具" scheme="http://www.nullok.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射(Reflection) 学习笔记</title>
    <link href="http://www.nullok.com/2019/07/20/java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.nullok.com/2019/07/20/java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-07-19T16:10:57.000Z</published>
    <updated>2020-01-23T13:51:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、反射概述"><a href="#一、反射概述" class="headerlink" title="一、反射概述"></a>一、反射概述</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>(网图)</p><p><strong>类加载过程：</strong></p><p><img src="https://s2.ax1x.com/2019/07/20/eSPM6S.png" alt="类加载活成"></p><h2 id="二、Class类（包含完整的类的结构信息）"><a href="#二、Class类（包含完整的类的结构信息）" class="headerlink" title="二、Class类（包含完整的类的结构信息）"></a>二、Class类（包含完整的类的结构信息）</h2><p><strong>Class对象由来：</strong><font color="Blue">将class文件读入内存，并为之创建一个Class对象</font></p><ul><li><code>Class</code> 没有public 构造器。<code>Class</code> 对象是在加载类时由Java 虚拟机以及通过调用类加载器中的 <code>defineClass</code> 方法自动构造的，因此不能显式地声明一个<code>Class</code>对象。</li><li>每个类（型）都有一个<code>Class</code>对象</li><li>Java基本类型和<code>void</code>都对应一个Class对象</li><li>每个数组属于被映射为 <code>Class</code> 对象的一个类，所有具有相同元素类型和维数的数组都共享该 <code>Class</code> 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每个数组属于被映射为 `Class` 对象的一个类，所有具有相同元素类型和维数的数组都共享该 `Class` 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">        String[] str2 = <span class="keyword">new</span> String[<span class="number">30</span>];</span><br><span class="line">        String[][] str3 = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br><span class="line">        <span class="keyword">int</span>[] in = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] in2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">        System.out.println(<span class="string">"String一维数组:"</span>+str.getClass().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"String一维数组（30）:"</span>+str2.getClass().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"String二维数组:"</span>+str3.getClass().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"int一维数组:"</span>+in.getClass().hashCode());</span><br><span class="line">        System.out.println(<span class="string">"int二维数组:"</span>+in2.getClass().hashCode());</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*output</span></span><br><span class="line"><span class="comment">   String一维数组:460141958</span></span><br><span class="line"><span class="comment">   String一维数组2:460141958</span></span><br><span class="line"><span class="comment">   String二维数组:1163157884</span></span><br><span class="line"><span class="comment">   int一维数组:1956725890</span></span><br><span class="line"><span class="comment">   int二维数组:356573597</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h3 id="1-获取Class对象方法"><a href="#1-获取Class对象方法" class="headerlink" title="1.获取Class对象方法"></a>1.获取Class对象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用getClass方法</span></span><br><span class="line">MyObject x;</span><br><span class="line">Class clazz = x.getClass();</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">String path = <span class="string">"cn.ileehan.demo.User"</span></span><br><span class="line">Class clazz = Class.forName(path);</span><br><span class="line"><span class="comment">// .class</span></span><br><span class="line">Class clazz = <span class="keyword">int</span>.class;</span><br><span class="line">Class clazz1 = User.class;</span><br></pre></td></tr></table></figure><h3 id="2-Class类常用方法"><a href="#2-Class类常用方法" class="headerlink" title="2.Class类常用方法"></a>2.Class类常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newInstance(); <span class="comment">// 创建实例，调用默认构造器</span></span><br><span class="line">getSuperclass(); <span class="comment">// 返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每种管理类型都是独一无二的Class对象，因此可以使用==来比较类对象</span></span><br><span class="line"><span class="comment">if(e.getClass == Employee.class)....</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo4 d = <span class="keyword">new</span> Demo4();</span><br><span class="line">        <span class="keyword">if</span> (d.getClass() == Demo4.class)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:true</span></span><br></pre></td></tr></table></figure><h2 id="二、反射机制的常见作用"><a href="#二、反射机制的常见作用" class="headerlink" title="二、反射机制的常见作用"></a>二、反射机制的常见作用</h2><p><strong>UserInfo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ITable</span>(<span class="string">"t_talbe"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IField</span>(name = <span class="string">"id"</span>,type = <span class="string">"int"</span>,length = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@IField</span>(name = <span class="string">"name"</span>,type = <span class="string">"varchar"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@IField</span>(name = <span class="string">"age"</span>,type = <span class="string">"int"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-动态加载类、动态获取类的信息（属性、方法、构造器）"><a href="#1-动态加载类、动态获取类的信息（属性、方法、构造器）" class="headerlink" title="1.动态加载类、动态获取类的信息（属性、方法、构造器）"></a>1.动态加载类、动态获取类的信息（属性、方法、构造器）</h3><p><strong>获取属性信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 获取成员变量并调用： </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 1.批量的 </span></span><br><span class="line"><span class="comment"> *      1).Field[] getFields():获取所有的”公有字段” </span></span><br><span class="line"><span class="comment"> *      2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有； </span></span><br><span class="line"><span class="comment"> * 2.获取单个的： </span></span><br><span class="line"><span class="comment"> *      1).public Field getField(String fieldName):获取某个”公有的”字段； </span></span><br><span class="line"><span class="comment"> *      2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的) </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *   设置字段的值： </span></span><br><span class="line"><span class="comment"> *      Field –&gt; public void set(Object obj,Object value): </span></span><br><span class="line"><span class="comment"> *                  参数说明： </span></span><br><span class="line"><span class="comment"> *                  1.obj:要设置的字段所在的对象； </span></span><br><span class="line"><span class="comment"> *                  2.value:要为字段设置的值； </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="comment">// 获取属性得到的是Field对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 动态加载类</span></span><br><span class="line">            Class clazz = Class.forName(<span class="string">"cn.ileehan.bean.UserInfo"</span>);</span><br><span class="line">            <span class="comment">// 获取属性信息</span></span><br><span class="line">            <span class="comment">// Field field = clazz.getField("id");  // 只能获取指定名称的公开属性信息</span></span><br><span class="line">            <span class="comment">// Field[] field = clazz.getFields();  // 获取所有公开属性的信息</span></span><br><span class="line">            </span><br><span class="line">            Field[] fields = clazz.getDeclaredFields(); <span class="comment">// 获取全部属性 包括公开与非公开</span></span><br><span class="line">            <span class="keyword">for</span> (Field temp : fields) &#123;</span><br><span class="line">                System.out.println(<span class="string">"属性："</span>+temp);</span><br><span class="line">            &#125;</span><br><span class="line">            Field f = clazz.getDeclaredField(<span class="string">"id"</span>); <span class="comment">// 获取指定属性 包括公开与非公开</span></span><br><span class="line">            System.out.println(<span class="string">"属性："</span>+f);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment">属性：private int cn.ileehan.bean.UserInfo.id</span></span><br><span class="line"><span class="comment">属性：private java.lang.String cn.ileehan.bean.UserInfo.name</span></span><br><span class="line"><span class="comment">属性：private int cn.ileehan.bean.UserInfo.age</span></span><br><span class="line"><span class="comment">属性：private int cn.ileehan.bean.UserInfo.id</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>获取方法信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 获取成员方法并调用： </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 1.批量的： </span></span><br><span class="line"><span class="comment"> *      public Method[] getMethods():获取所有”公有方法”；（包含了父类的方法也包含Object类） </span></span><br><span class="line"><span class="comment"> *      public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的) </span></span><br><span class="line"><span class="comment"> * 2.获取单个的： </span></span><br><span class="line"><span class="comment"> *      public Method getMethod(String name,Class&lt;?&gt;… parameterTypes): </span></span><br><span class="line"><span class="comment"> *                  参数： </span></span><br><span class="line"><span class="comment"> *                      name : 方法名； </span></span><br><span class="line"><span class="comment"> *                      Class … : 形参的Class类型对象 </span></span><br><span class="line"><span class="comment"> *      public Method getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes) </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *   调用方法： </span></span><br><span class="line"><span class="comment"> *      Method –&gt; public Object invoke(Object obj,Object… args): </span></span><br><span class="line"><span class="comment"> *                  参数说明： </span></span><br><span class="line"><span class="comment"> *                  obj : 要调用方法的对象； </span></span><br><span class="line"><span class="comment"> *                  args:调用方式时所传递的实参； </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">): </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 动态加载类</span></span><br><span class="line">            Class clazz = Class.forName(<span class="string">"cn.ileehan.bean.UserInfo"</span>);</span><br><span class="line">  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *只能获取公开方法，包括该类 继承 或者实现的接口</span></span><br><span class="line"><span class="comment">            Method[] method = clazz.getMethods(); // 返回所有方法</span></span><br><span class="line"><span class="comment">            for (Method temp : method) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("方法："+temp);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            Method m = clazz.getMethod("setId",int.class);// 获取指定方法</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// all</span></span><br><span class="line">            Method[] methods = clazz.getDeclaredMethods(); <span class="comment">// 获取该类的所有方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method temp : methods) &#123;</span><br><span class="line">                System.out.println(<span class="string">"方法："</span>+temp);</span><br><span class="line">            &#125;</span><br><span class="line">            Method m1 = clazz.getDeclaredMethod(<span class="string">"getName"</span>); <span class="comment">// 获取无参方法</span></span><br><span class="line">            System.out.println(<span class="string">"方法："</span>+m1);</span><br><span class="line">            Method m2 = clazz.getDeclaredMethod(<span class="string">"setId"</span>,<span class="keyword">int</span>.class); <span class="comment">// 获取有参方法</span></span><br><span class="line">            System.out.println(<span class="string">"方法："</span>+m2);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment">方法：private java.lang.String cn.ileehan.bean.UserInfo.getName()</span></span><br><span class="line"><span class="comment">方法：public int cn.ileehan.bean.UserInfo.getId()</span></span><br><span class="line"><span class="comment">方法：public void cn.ileehan.bean.UserInfo.setName(java.lang.String)</span></span><br><span class="line"><span class="comment">方法：public int cn.ileehan.bean.UserInfo.getAge()</span></span><br><span class="line"><span class="comment">方法：public void cn.ileehan.bean.UserInfo.setAge(int)</span></span><br><span class="line"><span class="comment">方法：public void cn.ileehan.bean.UserInfo.setId(int)</span></span><br><span class="line"><span class="comment">方法：private java.lang.String cn.ileehan.bean.UserInfo.getName()</span></span><br><span class="line"><span class="comment">方法：public void cn.ileehan.bean.UserInfo.setId(int)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>获取构造器信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员； </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * 1.获取构造方法： </span></span><br><span class="line"><span class="comment"> *      1).批量的方法： </span></span><br><span class="line"><span class="comment"> *          public Constructor[] getConstructors()：所有”公有的”构造方法 </span></span><br><span class="line"><span class="comment">            public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有) </span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment"> *      2).获取单个的方法，并调用： </span></span><br><span class="line"><span class="comment"> *          public Constructor getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法： </span></span><br><span class="line"><span class="comment"> *          public Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有； </span></span><br><span class="line"><span class="comment"> *       </span></span><br><span class="line"><span class="comment"> *          调用构造方法： </span></span><br><span class="line"><span class="comment"> *          Constructor–&gt;newInstance(Object… initargs) </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 动态加载类</span></span><br><span class="line">            Class clazz = Class.forName(<span class="string">"cn.ileehan.bean.UserInfo"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取构造器信息</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            必须是公开的</span></span><br><span class="line"><span class="comment">            Constructor[] constructor = clazz.getConstructors(); // 获取所有公开构造器</span></span><br><span class="line"><span class="comment">            for (Constructor temp : constructor) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("构造器："+temp);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            Constructor c = clazz.getConstructor(int.class); // 获取指定构造器传参数类型的类</span></span><br><span class="line"><span class="comment">            System.out.println("构造器："+c);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 获取所有的构造器 公开与非公开</span></span><br><span class="line">            Constructor[] constructors = clazz.getDeclaredConstructors();<span class="comment">//获取所有构造器</span></span><br><span class="line">            <span class="keyword">for</span> (Constructor temp : constructors) &#123;</span><br><span class="line">                System.out.println(<span class="string">"构造器："</span>+temp);</span><br><span class="line">            &#125;</span><br><span class="line">            Constructor c = clazz.getDeclaredConstructor(<span class="keyword">int</span>.class);<span class="comment">//获取指定参数类型的构造器</span></span><br><span class="line">            System.out.println(<span class="string">"构造器："</span>+c);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment">构造器：public cn.ileehan.bean.UserInfo(int)</span></span><br><span class="line"><span class="comment">构造器：public cn.ileehan.bean.UserInfo()</span></span><br><span class="line"><span class="comment">构造器：public cn.ileehan.bean.UserInfo(int)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-动态使用（属性、方法、构造器）"><a href="#2-动态使用（属性、方法、构造器）" class="headerlink" title="2.动态使用（属性、方法、构造器）"></a>2.动态使用（属性、方法、构造器）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"cn.ileehan.bean.UserInfo"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;UserInfo&gt; clazz = (Class&lt;UserInfo&gt;) Class.forName(path);</span><br><span class="line">            <span class="comment">// 通过反射API调用构造器，构造对象</span></span><br><span class="line">            UserInfo u = clazz.newInstance(); <span class="comment">// 实际上调用了UserInfo的无参构造方法</span></span><br><span class="line">            System.out.println(u);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//指定参数类型</span></span><br><span class="line">            Constructor&lt;UserInfo&gt; constructor = clazz.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">            UserInfo us = constructor.newInstance(<span class="number">12</span>);<span class="comment">//实例化的时候要按照构造器要求传值</span></span><br><span class="line">            System.out.println(us.getId());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过反射API调用方法</span></span><br><span class="line">            UserInfo u2 = clazz.newInstance();</span><br><span class="line">            Method m = clazz.getDeclaredMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line">            m.invoke(u2,<span class="string">"李四"</span>); <span class="comment">// 激活此方法 参数1-》哪里的方法 参数2-》按照方法的形参来</span></span><br><span class="line">            System.out.println(u2.getName());</span><br><span class="line">            <span class="comment">// 通过反射API操作属性</span></span><br><span class="line">            UserInfo u3 = clazz.newInstance();</span><br><span class="line">            Field f = clazz.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 允许操作private 不用做安全检查了，可以直接访问</span></span><br><span class="line">            f.set(u3,<span class="number">123</span>); <span class="comment">// 通过反射直接写属性</span></span><br><span class="line">            System.out.println(u3.getAge()); <span class="comment">// 通过反射直接读属性的值</span></span><br><span class="line">            System.out.println(f.get(u3));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-反射main方法"><a href="#3-反射main方法" class="headerlink" title="3.反射main方法"></a>3.反射main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"cn.ileehan.bean.UserInfo"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取UserInfo对象字节码</span></span><br><span class="line">            Class&lt;UserInfo&gt; clazz = (Class&lt;UserInfo&gt;) Class.forName(path);</span><br><span class="line">            <span class="comment">//获取main方法</span></span><br><span class="line">            Method methodMain = clazz.getMethod(<span class="string">"main"</span>,String[].class);</span><br><span class="line">            <span class="comment">//调用main方法</span></span><br><span class="line">            methodMain.invoke(<span class="keyword">null</span>, (Object)<span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;);</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           必须要加上(Object)</span></span><br><span class="line"><span class="comment">           否则编译器会编译成</span></span><br><span class="line"><span class="comment">            methodMain.invoke(null, "a","b","c");</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-反射注解"><a href="#4-反射注解" class="headerlink" title="4.反射注解"></a>4.反射注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取UserInfo的class对象</span></span><br><span class="line">            Class cl = Class.forName(<span class="string">"cn.ileehan.bean.UserInfo"</span>);</span><br><span class="line">            <span class="comment">// 获得类的所有注解</span></span><br><span class="line">            Annotation[] annotations = cl.getAnnotations();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (Annotation a : annotations) &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获得类的指定注解</span></span><br><span class="line">            ITable table = (ITable) cl.getAnnotation(ITable.class); <span class="comment">// 转成注解类型</span></span><br><span class="line">            System.out.println(table.value());</span><br><span class="line">            <span class="comment">// 获得类的属性的注解</span></span><br><span class="line">            Field na = cl.getDeclaredField(<span class="string">"name"</span>); <span class="comment">// 通过反射获取指定属性</span></span><br><span class="line">            IField ie = na.getAnnotation(IField.class);</span><br><span class="line">            System.out.println(ie.name()+<span class="string">"---"</span>+ie.type()+<span class="string">"---"</span>+ie.length());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@cn.ileehan.annotation.ITable(value=t_talbe)</span></span><br><span class="line"><span class="comment">t_talbe</span></span><br><span class="line"><span class="comment">name---varchar---10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="5-通过反射越过泛型检查"><a href="#5-通过反射越过泛型检查" class="headerlink" title="5.通过反射越过泛型检查"></a>5.通过反射越过泛型检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想Sting泛型的集合，添加Integer类型的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;  </span><br><span class="line">        ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">        strList.add(<span class="string">"aaa"</span>);  </span><br><span class="line">        strList.add(<span class="string">"bbb"</span>);  </span><br><span class="line">          </span><br><span class="line">    <span class="comment">// strList.add(100);  </span></span><br><span class="line">        <span class="comment">//获取ArrayList的Class对象，反向的调用add()方法，添加数据  </span></span><br><span class="line">        Class listClass = strList.getClass(); <span class="comment">//得到 strList 对象的字节码 对象  </span></span><br><span class="line">        <span class="comment">//获取add()方法  </span></span><br><span class="line">        Method m = listClass.getMethod(<span class="string">"add"</span>, Object.class);  </span><br><span class="line">        <span class="comment">//调用add()方法  </span></span><br><span class="line">        m.invoke(strList, <span class="number">100</span>);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//遍历集合  </span></span><br><span class="line">        <span class="keyword">for</span>(Object obj : strList)&#123;  </span><br><span class="line">            System.out.println(obj);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment">aaa</span></span><br><span class="line"><span class="comment">bbb</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/lwl20140904/article/details/80163880" target="_blank" rel="noopener">java反射（特别通俗易懂）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、反射概述&quot;&gt;&lt;a href=&quot;#一、反射概述&quot; class=&quot;headerlink&quot; title=&quot;一、反射概述&quot;&gt;&lt;/a&gt;一、反射概述&lt;/h2&gt;&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调
      
    
    </summary>
    
    
      <category term="Java" scheme="http://www.nullok.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nullok.com/tags/Java/"/>
    
      <category term="笔记" scheme="http://www.nullok.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 注解 学习笔记</title>
    <link href="http://www.nullok.com/2019/07/19/java%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.nullok.com/2019/07/19/java%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-07-19T14:54:22.000Z</published>
    <updated>2020-01-23T13:51:09.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、注解格式"><a href="#一、注解格式" class="headerlink" title="一、注解格式"></a>一、注解格式</h2><h2 id="注解格式"><a href="#注解格式" class="headerlink" title="注解格式"></a>注解格式</h2><p><strong>格式</strong>：@注释名/ @注释名(value)</p><p><strong>例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWaring</span>(<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure><h2 id="二、内置注解"><a href="#二、内置注解" class="headerlink" title="二、内置注解"></a>二、内置注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">// 用于修饰方法，表示重写</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span> <span class="comment">// 可修饰方法 属性 类， 表示此方法弃用（不是不能用）</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarings</span> <span class="comment">// 抑制编译时的警告信息</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>deprecation</td><td>使用了过时的类或方法的警告</td></tr><tr><td>unchecked</td><td>执行了为检查的转换。eg:使用集合未指定泛型</td></tr><tr><td>fallthrough</td><td>switch发生case穿透</td></tr><tr><td>path</td><td>资源或类路径不存在</td></tr><tr><td>serial</td><td>当前可序列化类上缺少serialVersionUID定义时的警告</td></tr><tr><td>finally</td><td>任何finally子句不能完成时的警告</td></tr><tr><td>all</td><td>关于以上的所有警告</td></tr></tbody></table><p><strong>eg:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarings</span>(<span class="string">"fallthrough"</span>)</span><br><span class="line"><span class="meta">@SuppressWarings</span>(value = &#123;<span class="string">"unchecked"</span>,<span class="string">"deprecation"</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="三、自定义注解"><a href="#三、自定义注解" class="headerlink" title="三、自定义注解"></a>三、自定义注解</h2><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">元注解</span></span><br><span class="line"><span class="comment">public @interface 注解名｛注解体｝</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IField &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h3><p>注解类型的声明部分：</p><p>注解在Java中，与类、接口、枚举类似，因此其声明语法基本一致，只是所使用的关键字有所不同<code>@interface</code>。<strong>在底层实现上，所有定义的注解都会自动继承java.lang.annotation.Annotation接口</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IField &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解类型元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IField &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 12</span>;</span><br><span class="line">    <span class="keyword">int</span>[] array();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>:warning:注意</p><ul><li>该元素的类型只能是<strong>基本数据类型、Class、String、enum、注解类型以及上述类型的一位数组</strong></li><li>若注解中只有一个元素，则将其命名为<strong>value</strong>（方便，在使用时可省略参数名）</li><li>()仅是特殊语法，不代表他是方法</li><li>如果没有默认值，使用时必须要给该类型元素赋值</li><li>定义注解时常用空字符串、0做默认值，可使用-1表示不存在</li></ul><h3 id="2-元注解"><a href="#2-元注解" class="headerlink" title="2.元注解"></a>2.元注解</h3><p><strong>元注解：专门修饰注解的注解</strong></p><h4 id="2-1-Target"><a href="#2-1-Target" class="headerlink" title="2.1 @Target"></a>2.1 @Target</h4><p>用于描述注解的使用范围（注解用在什么位置上）</p><table><thead><tr><th>所修饰范围</th><th>取值ElementType</th></tr></thead><tbody><tr><td>package包</td><td>PACKAGE</td></tr><tr><td>类、接口、枚举、注解类型</td><td>TYPE</td></tr><tr><td>类成员(方法、构造方法、成员变量、枚举值)</td><td>CONSTRUCTOR:描述构造器<br>FIELD：用于描述成员变量<br>METHOD:描述方法</td></tr><tr><td>方法参数和局部变量</td><td>LOCAL_VARIABLE:描述局部变量<br>PARAMETER:描述参数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CherryAnnotation被限定只能使用在类、接口或方法上面</span></span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-Retention"><a href="#2-2-Retention" class="headerlink" title="2.2 @Retention"></a>2.2 @Retention</h4><p>用于描述注解的生命周期</p><table><thead><tr><th>取值RetentionPolicy</th><th>作用</th></tr></thead><tbody><tr><td>SOURCE</td><td>在源文件中有效（给人看的）</td></tr><tr><td>CLASS</td><td>在class文件中有效（JVM忽略它）</td></tr><tr><td>RUNTIME</td><td>在运行时有效，此时可以被反射机制读取</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 运行时有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IField &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，自定义注解使用的是<code>RetentionPolicy.CLASS</code></p><h2 id="四、反射机制读取注解信息"><a href="#四、反射机制读取注解信息" class="headerlink" title="四、反射机制读取注解信息"></a>四、反射机制读取注解信息</h2><p><strong>Demo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取UserInfo的class对象</span></span><br><span class="line">            Class cl = Class.forName(<span class="string">"cn.ileehan.bean.UserInfo"</span>);</span><br><span class="line">            <span class="comment">// 获得类的所有注解</span></span><br><span class="line">            Annotation[] annotations = cl.getAnnotations();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (Annotation a : annotations) &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获得类的指定注解</span></span><br><span class="line">            ITable table = (ITable) cl.getAnnotation(ITable.class);</span><br><span class="line">            System.out.println(table.value());</span><br><span class="line">            <span class="comment">// 获得类的属性的注解</span></span><br><span class="line">            Field na = cl.getDeclaredField(<span class="string">"name"</span>); <span class="comment">// 通过反射获取指定属性</span></span><br><span class="line">            IField ie = na.getAnnotation(IField.class);</span><br><span class="line">            System.out.println(ie.name()+<span class="string">"---"</span>+ie.type()+<span class="string">"---"</span>+ie.length());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*output</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@cn.ileehan.annotation.ITable(value=t_talbe)</span></span><br><span class="line"><span class="comment">t_talbe</span></span><br><span class="line"><span class="comment">name---varchar---10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>ITable.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ITable &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IField.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IField &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserInfo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ITable</span>(<span class="string">"t_talbe"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IField</span>(name = <span class="string">"id"</span>,type = <span class="string">"int"</span>,length = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@IField</span>(name = <span class="string">"name"</span>,type = <span class="string">"varchar"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@IField</span>(name = <span class="string">"age"</span>,type = <span class="string">"int"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、注解格式&quot;&gt;&lt;a href=&quot;#一、注解格式&quot; class=&quot;headerlink&quot; title=&quot;一、注解格式&quot;&gt;&lt;/a&gt;一、注解格式&lt;/h2&gt;&lt;h2 id=&quot;注解格式&quot;&gt;&lt;a href=&quot;#注解格式&quot; class=&quot;headerlink&quot; title=&quot;注
      
    
    </summary>
    
    
      <category term="Java" scheme="http://www.nullok.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.nullok.com/tags/Java/"/>
    
      <category term="笔记" scheme="http://www.nullok.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
